// export const popular_review_rating = async (req, res) => {
//     try {
//         const { categoryId } = req.params;
//         const { bestRating, bestReviewed, title } = req.query;


//         let services = await Service.find({ categoryId }).populate('ratings.reviewerId', 'firstName')
//             .select("-about_Gig -requirement")
//             .populate({
//                 path: "sub_categoryId",
//                 select: "feature_SubCategories_name"
//             })
//             .populate({
//                 path: "authId",
//                 select: "firstName lastName authProfile"
//             }).populate({
//                 path: "categoryId",
//                 select: "featureCategoriesName"
//             }).sort({ createdAt: -1 });

//         if (!services || services.length === 0) {
//             return res.status(400).json({
//                 message: "No services found for this category"
//             });
//         }

//         // search ke ley 
//         if (title) {
//             services = services.filter(service => service.title && service.title.toLowerCase().includes(title.toLowerCase()));
//         }

//         let filteredServices = [];

//         if (bestRating) {
//             const servicesWithAverageRating = services.map(service => {
//                 let totalStars = 0;
//                 let totalRatings = service.ratings.length;
//                 service.ratings.forEach(rating => {
//                     totalStars += rating.rating;
//                 });

//                 const averageRating = service.ratings.length > 0 ? totalStars / service.ratings.length : 0;

//                 return {
//                     ...service.toObject(),
//                     averageRating,
//                     totalRatings
//                 };
//             });
//             // jisko average rating zero ho wh data show ni hoga
//             filteredServices = servicesWithAverageRating.filter(service => service.averageRating > 0);
//             filteredServices.sort((a, b) => b.averageRating - a.averageRating);

//         } else {
//             // average rating ke ley wps se map lagaya
//             filteredServices = services.map(service => {
//                 let totalStars = 0;
//                 let totalRatings = service.ratings.length;

//                 service.ratings.forEach(rating => {
//                     totalStars += rating.rating;
//                 });

//                 const averageRating = service.ratings.length > 0 ? totalStars / service.ratings.length : 0;

//                 return {
//                     ...service.toObject(),
//                     averageRating,
//                     totalRatings
//                 };
//             });
//         }

//         if (bestReviewed) {
//             // jisko average rating zero ho wh data show ni hoga
//             const servicesWithReviews = filteredServices.filter(service => service.ratings.length > 0);

//             servicesWithReviews.sort((a, b) => b.ratings.length - a.ratings.length);

//             filteredServices = servicesWithReviews;
//         }

//         let num_of_service = filteredServices.length;

//         res.status(200).send({ services: filteredServices, num_of_service });

//     } catch (error) {
//         res.status(500).send({ message: error.message });
//     }
// };














export const perticular_sub_cat_service = async (req, res) => {

    try {
        // const { sub_categoryId } = req.params

        // const checkService = await Service.find({ sub_categoryId }).select("-about_Gig -requirement")
        //     .populate({
        //         path: "sub_categoryId",
        //         select: "feature_SubCategories_name"
        //     })
        //     .populate({
        //         path: "authId",
        //         select: "firstName lastName"
        //     })
        //     .populate({
        //         path: "categoryId",
        //         select: "featureCategoriesName"
        //     })
        // let num_of_service = checkService.length

        // // rating popular service start
        // const servicesWithAverageRating = checkService.map(service => {

        //     let totalStars = 0;
        //     let totalRatings = service.ratings.length;

        //     service.ratings.forEach(rating => {
        //         totalStars += rating.rating;
        //     });

        //     const averageRating = service.ratings.length > 0 ? totalStars / service.ratings.length : 0;

        //     return {
        //         ...service.toObject(),
        //         averageRating,
        //         totalRatings
        //     };
        // })

        // servicesWithAverageRating.sort((a, b) => b.averageRating - a.averageRating);  //sort kara rating ko decending order mee
        // // rating popular service end

        // if (checkService) {
        //     res.status(200).json({
        //         message: "perticular sub_categories_services",
        //         subCategories_Service: servicesWithAverageRating,
        //         num_of_service
        //     })
        // }

        // else {
        //     res.status(404).json({
        //         message: "not found this sub-categories services"
        //     })
        // }
        // ------------------------------------------


        const { sub_categoryId } = req.params;
        const { bestRating, bestReviewed, title, minRating, maxRating } = req.query;

        let services = await Service.find({ sub_categoryId }).populate('ratings.reviewerId', 'firstName')
            .select("-about_Gig -requirement")
            .populate({
                path: "sub_categoryId",
                select: "feature_SubCategories_name"
            })
            .populate({
                path: "authId",
                select: "firstName lastName authProfile"
            }).populate({
                path: "categoryId",
                select: "featureCategoriesName"
            }).sort({ createdAt: -1 });

        if (!services || services.length === 0) {
            return res.status(400).json({
                message: "No services found for this category"
            });
        }

        // search ke ley 
        if (title) {
            services = services.filter(service => service.title && service.title.toLowerCase().includes(title.toLowerCase()));
        }

        let filteredServices = [];

        if (bestRating) {
            const servicesWithAverageRating = services.map(service => {
                let totalStars = 0;
                let totalRatings = service.ratings.length;
                service.ratings.forEach(rating => {
                    totalStars += rating.rating;
                });

                const averageRating = service.ratings.length > 0 ? totalStars / service.ratings.length : 0;

                return {
                    ...service.toObject(),
                    averageRating,
                    totalRatings
                };
            });

            filteredServices = servicesWithAverageRating.filter(service => service.averageRating > 0);
            filteredServices.sort((a, b) => b.averageRating - a.averageRating);

        } else {
            filteredServices = services.map(service => {
                let totalStars = 0;
                let totalRatings = service.ratings.length;

                service.ratings.forEach(rating => {
                    totalStars += rating.rating;
                });

                const averageRating = service.ratings.length > 0 ? totalStars / service.ratings.length : 0;

                return {
                    ...service.toObject(),
                    averageRating,
                    totalRatings
                };
            });
        }

        // Apply the minRating and maxRating filter 
        if (minRating || maxRating) {
            filteredServices = filteredServices.filter(service => {
                const averageRating = service.averageRating;
                if (minRating && maxRating) {
                    return averageRating >= parseFloat(minRating) && averageRating <= parseFloat(maxRating);
                }
                if (minRating) {
                    return averageRating >= parseFloat(minRating);
                }
                if (maxRating) {
                    return averageRating <= parseFloat(maxRating);
                }
                return true;
            });
        }

        if (bestReviewed) {
            // jisko average rating zero ho wh data show ni hoga
            const servicesWithReviews = filteredServices.filter(service => service.ratings.length > 0);

            servicesWithReviews.sort((a, b) => b.ratings.length - a.ratings.length);

            filteredServices = servicesWithReviews;
        }

        let num_of_service = filteredServices.length;

        res.status(200).send({
            message: "perticular sub_categories_services", 
            subCategories_Service: filteredServices, num_of_service
             });
    } catch (error) {
        res.status(500).json({
            message: "internal server error"
        })
    }
}
